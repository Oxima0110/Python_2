# В большой текстовой строке подсчитать количество 
# встречаемых слов и вернуть 10 самых частых. 
# Не учитывать знаки препинания и регистр символов. 
# За основу возьмите любую статью из википедии или из 
# документации к языку.

def sort_dict(text_list:list)->dict:
    '''
    Составляем словарь слово:количество и сортируем
    '''
    text_dict = {}
    for element in text_list:
        if element not in text_dict.keys():
            text_dict[element] = text_list.count(element)
    sorted_values = sorted(text_dict.values(), reverse=True)
    sorted_dict = {}
    for value in sorted_values:
        for key in text_dict.keys():
            if text_dict[key] == value:
                sorted_dict[key] = text_dict[key]
    return sorted_dict

LIMIT = 10

text = """Девушка билась в сбитом флаере.
Она была из того сорта людей, что борются за свою жизнь
до последнего. Супернадежная машина рухнула не где-нибудь 
а на полузатопленной территории Калли. За считанные
мгновения до почти неконтролируемого падения автопилот
предпочел выбрать из трех вариантов место с наибольшим шансом на 
успешную посадку, с компьютерным похеризмом проигнорировав 
все криминальные и социальные аспекты окружающей местности.
Машина упала. С визгом ушел в небо третий маяк – первые два 
вечнолета отстрелились еще в воздухе. Четвертый отстрел 
ударил в землю под упавшей машиной. Он пробил неглубокую 
дыру, после чего присыпанный почвой четвертый маяк тоже 
заработал, указывая место падения и оставаясь скрытым для 
глаз – его, как вечнолеты, не сбить, тут нужны сканеры. 
Четвертым шагом была ушедшая вверх визуалка – красная 
аварийная ракета, что лопнула в вышине, выбросила 
старомодный парашют и невыносимо медленно начала снижаться. 
Четвертого шага не должно было быть – еще одна тупая ошибка 
компьютера, оценившего условно-зеленый статус окружающих 
территорий, как наличие миролюбивого населения.
И красной ракеты вполне хватило, чтобы не только привлечь 
внимание всех окрестных ублюдков, но и с точностью указать местоположение рухнувшего на их лишайные головы счастья, любезно подсветив при этом цветом готовой пролиться крови.
Да... даже этого дерьма вполне хватило бы для целой кучи 
проблем. Но машинный разум проверил запас энергии в бортовых батареях, счел его удовлетворительным и выпустил в небо первый веер лазерных лучей.
Все это время девушка сражалась с тупой техникой, стремясь 
предотвратить это дерьмо. Но она безнадежно опоздала – 
только чтобы убедить бортовой компьютер разблокировать 
ремни безопасности, ей потребовалось несколько минут. А 
дальше этого дело не пошло... Превратившаяся в гроб машина 
не пожелала разблокировать двери или потолочный люк, 
заодно перекрыв прозрачной перегородкой доступ к передней 
части салона. Причина – неимение официально подтвержденных 
навыков выживания в экстремальных ситуациях, равно как и 
неимение подтвержденных навыков обращения с оружием. 
Отметив нервозность пассажирки, бортовой компьютер любезно 
предложил сделать ей укол успокоительного. Достаточно 
положить руку на левый массивный подлокотник заднего 
кресла, что уже вернул себе привычную форму, прекратив 
играть роль дополнительного защитного обруча в районе 
живота пассажирки."""

translation_table = str.maketrans("", "", ".,!?–")
new_txt = text.translate(translation_table)
txt_list = new_txt.split()
txt_dict = sort_dict(txt_list)
for item in list(txt_dict)[0:LIMIT]:
    print(f'Слово: {item} встречается {txt_dict[item]} раз')
#print(txt_dict)

